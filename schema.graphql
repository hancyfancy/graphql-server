type Query  {
   students: [Student!]!,
   student(id: ID!): Student!,
   studentsBy(search: StudentParameters): [Student]!,
   colleges: [College!]!,
   college(id: ID!): College!,
   collegesBy(search: CollegeParameters): [College]!,
   books: [Book!]!,
   book(id: ID!): Book!,
   booksBy(search: BookParameters): [Book]!,
}

type Mutation {
	addStudent(student: StudentMutationParameters!): Student!,
    addStudents(students: [StudentMutationParameters!]!): [Student!]!,
    updateStudent(id: ID!, student: StudentParameters!): Student,
    updateStudents(students: [StudentMultipleMutationParameters!]!): [Student]!,
    addBook(book: BookMutationParameters!): Book!,
    addBooks(books: [BookMutationParameters!]!): [Book!]!,
    updateBook(id: ID!, book: BookParameters!): Book,
    updateBooks(students: [BookMultipleMutationParameters!]!): [Book]!,
}

type Student {
    id: ID!,
    email: String!,
    firstName: String!,
    lastName: String!,
    college: College!
}

input StudentParameters {
    email: String,
    firstName: String,
    lastName: String,
    collegeId: ID,
}

input StudentMutationParameters {
    email: String!,
    firstName: String!,
    lastName: String!,
	collegeId: ID!
}

input StudentMultipleMutationParameters {
    id: ID!,
    student: StudentParameters!
}

type College {
    id: ID!,
    name: String!,
    location: String!,
    rating: Float!,
    books: [Book!]!,
    students: [Student!]!
}

input CollegeParameters {
    name: String,
    location: String,
    rating: Float,
    bookIds: [String],
    studentIds: [String]
}

type Book {
    id: ID!,
    name: String!,
    author: String!,
    colleges: [College!]!
}

input BookParameters {
    name: String,
    author: String,
    collegeIds: [String]
}

input BookMutationParameters {
    name: String!,
    author: String!,
    collegeIds: [String!]!
}

input BookMultipleMutationParameters {
    id: ID!,
    book: BookParameters!
}